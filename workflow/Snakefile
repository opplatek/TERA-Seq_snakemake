# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

from snakemake.utils import min_version
import pandas as pd
import yaml
#import os
#import re


##### set minimum snakemake version #####
min_version("7.24.0")


##### Define container #####
singularity: "teraseq-snakemake.sif"


##### config file #####
configfile: "config/config.yaml"


##### Functions to load virt environments in Singularity #####
activ_perl="set +eu; . /usr/local/TERA-Seq_manuscript/tools/perl-virtualenv/teraseq/bin/activate; set -eu"
activ_conda=". /usr/local/miniconda3/bin/activate; conda activate teraseq"
activ_cutadapt=activ_conda + "; " + ". /usr/local/TERA-Seq_manuscript/tools/cutadapt-2.5/venv/bin/activate"
activ_deeptools=activ_conda + "; " + ". /usr/local/TERA-Seq_manuscript/tools/deepTools-3.5.0/venv/bin/activate"
CONDA_PATH="/usr/local/miniconda3/envs/teraseq/bin" # Save Conda bin path

def get_refs(assemblies, sample):
    assembly=f"{assemblies[sample]}"

    return {'mmi_wribo':"data/" + assembly + "/minimap2.17/ensembl-transcripts-wRibo.k12.mmi",
            'mmi_trans':"data/" + assembly + "/minimap2.17/transcripts.k12.mmi",
            'mmi_genome':"data/" + assembly + "/minimap2.17/genome.k12.mmi",
            'gtf_polya':"data/" + assembly + "/genes-polya.gtf",
            'bed_mrna':"data/" + assembly + "/genic_elements.mrna.bed",
            'bed_ncrna':"data/" + assembly + "/genic_elements.ncrna.bed",
            'bed_utr5':"data/" + assembly + "/genic_elements.utr5.bed",
            'bed_cds':"data/" + assembly + "/genic_elements.cds.bed",
            'bed_utr3':"data/" + assembly + "/genic_elements.utr3.bed"}

def get_libtype(libtypes, sample):
    libtype=libtypes[sample]
    return libtype

def get_adaptside(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    adaptside="xxx"
    if libtype.lower() == "5tera":
        adaptside="rel5"
    elif libtype.lower() == "tera3":
        adaptside="rel3"

    return adaptside

##### read config #####
#SAMPLES=["sc.test.1"]
SAMPLES = pd.read_csv(config['samples'])['sample'].tolist() # read list of samples from the config

ASSEMBLIES = dict(pd.read_csv(config['samples']).set_index('sample', drop=False)['assembly']) # Read sample->assembly
LIBTYPES = dict(pd.read_csv(config['samples']).set_index('sample', drop=False)['libtype']) # Read sample->assembly
with open(config['adapters'], 'r') as file:
    ADAPTERS = yaml.safe_load(file)
with open(config['ref_links'], 'r') as file:
    REF_LINKS = yaml.safe_load(file)
#print(ADAPTERS[LIBTYPES["hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1"]])

##### Wildcards constrains
wildcard_constraints:
    sample="[^/]*", # anything but "/" anywhere in the string; Note: don't use ^...$, to specify constrains, it woulnd't work
#    k="\d+", # Only numbers
    k="[1-9]+", # Only numbers starting with 1

##### load rules #####
include: "rules/signularity-envs-test.smk"
include: "rules/references-prep.smk"
include: "rules/sanitize-reads.smk"
include: "rules/preprocess.smk"
include: "rules/map_minimap2.smk"
include: "rules/sam-sql-db.smk"
include: "rules/qc-post.smk"

##### target rules #####
rule all:
    input:
        # expand("data/{assembly}/ribosomal.fa", assembly=ASSEMBLY),
        # expand("data/{assembly}/genes-total.gtf", assembly=ASSEMBLY),
        # expand("data/{assembly}/genic_elements-total.mrna.bed", assembly=ASSEMBLY),
        # expand("data/{assembly}/ribosomal.gmap.gtf", assembly=ASSEMBLY),
        # expand("data/{assembly}/ensembl_genes.gtf.gz", assembly=ASSEMBLY),
        # expand("data/{assembly}/rRNA_tRNA.bed", assembly=ASSEMBLY),
        # expand("data/{assembly}/minimap2.17", assembly=ASSEMBLY),
        # expand("data/samples/{sample}/fastq/reads.1.sanitize.noribo.fastq.gz", sample=SAMPLE)
        # expand("data/samples/{sample}/align/reads.1.sanitize.toGenome.sorted.bam.bai", sample=SAMPLE),
        # expand("data/samples/{sample}/align/reads.1.sanitize.noribo.toTranscriptome.sorted.bam.bai", sample=SAMPLE),
        expand("data/samples/{sample}/log/cutadapt.lens.pdf", sample=SAMPLES),
        expand("data/samples/{sample}/log/mapping-stats.transcriptome.done", sample=SAMPLES),
        # expand("data/{assembly}/STAR-2.7.2b", assembly=ASSEMBLY),
        # expand("data/{assembly}/STAR-2.7.2b-annot", assembly=ASSEMBLY)
#
#        expand("results/singularity-{test}-test.txt", test=["conda", "perl", "cutadapt", "deeptools"])
