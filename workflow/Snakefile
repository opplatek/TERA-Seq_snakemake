# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

from snakemake.utils import min_version
import pandas as pd
import yaml
import subprocess
import re
import sys
#import os


##### set minimum snakemake version #####
min_version("7.24.0")


##### config file #####
configfile: "config/config.yaml"


##### Define container #####
# # Probably not very robust but works for now
# singularity_version = str(subprocess.check_output("singularity --version", shell=True))
# if re.findall(r'\b2.', singularity_version) != []:
#     singularity_container="teraseq-snakemake.simg" # Singularity 2 (tested on 2.6.1-dist)
# elif re.findall(r'\b3.', singularity_version) != []:
#     singularity_container="teraseq_snakemake.sif" # Singularity 3 (tested on singularity-ce version 3.11.1-bionic)
# else:
#     sys.exit("Cannot determine Singularity container based on Singularity version. Please hard-code it into the Snakemake file. Singulariy version" + singularity_version)

#singularity: config['singular_containerdir'] + "/" + singularity_container
singularity: config['singularity_container']

##### Functions to load virt environments in Singularity #####
activ_perl="set +eu; . /usr/local/TERA-Seq_manuscript/tools/perl-virtualenv/teraseq/bin/activate; set -eu"
activ_conda=". /usr/local/miniconda3/bin/activate; conda activate teraseq"
activ_cutadapt=activ_conda + "; " + ". /usr/local/TERA-Seq_manuscript/tools/cutadapt-2.5/venv/bin/activate"
activ_deeptools=activ_conda + "; " + ". /usr/local/TERA-Seq_manuscript/tools/deepTools-3.5.0/venv/bin/activate"
CONDA_PATH="/usr/local/miniconda3/envs/teraseq/bin" # DO NOT CHANGE! Conda env bin path in the Singularity container; might not be necessary


def get_refs_trans(datadir, assemblies, protocols, sample):
    assembly=f"{assemblies[sample]}"
    protocol=get_protocol(protocols, sample)

    return {'mmi_trans':datadir  + "/" + assembly + "/minimap2.17/transcripts-" + protocol + ".k12.mmi",
            'gtf':datadir  + "/" + assembly + "/genes-" + protocol + ".gtf",
            'bed_mrna':datadir   + "/" + assembly + "/genic_elements-" + protocol + ".mrna.bed",
            'bed_ncrna':datadir  + "/" + assembly + "/genic_elements-" + protocol + ".ncrna.bed",
            'bed_utr5':datadir   + "/" + assembly + "/genic_elements-" + protocol + ".utr5.bed",
            'bed_cds':datadir    + "/" + assembly + "/genic_elements-" + protocol + ".cds.bed",
            'bed_utr3':datadir   + "/" + assembly + "/genic_elements-" + protocol + ".utr3.bed",
            }
            # 'mmi_trans_total':datadir  + "/" + assembly + "/minimap2.17/transcripts-total.k12.mmi",


def get_refs(datadir, assemblies, sample):
    assembly=f"{assemblies[sample]}"

    return {'mmi_wribo':datadir  + "/" + assembly + "/minimap2.17/ensembl-transcripts-wRibo.k12.mmi",
            'mmi_genome':datadir + "/" + assembly + "/minimap2.17/genome.k12.mmi",
            'bed_rrna':datadir   + "/" + assembly + "/rRNA.bed",
            'names_rrna':datadir + "/" + assembly + "/rRNA.names.txt"
            }


def get_libtype(libtypes, sample):
    libtype=libtypes[sample]

    return libtype.lower()


# def get_adaptside(libtypes, sample):
#     libtype=get_libtype(libtypes, sample)

#     if libtype.lower() == "5tera":
#         adaptside="rel5"
#     elif libtype.lower() == "tera3":
#         adaptside="rel3"

#     return adaptside.lower()


def get_adapter(libtypes, adapters, sample):
    adapter=adapters[libtypes[sample]['sequence']]
    return adapter


# def get_cutadapt_settings(libtypes, adapters, sample):
#     return {'sequence':adapters[libtypes[sample]]['sequence'],
#             'side':adapters[libtypes[sample]]['side'],
#             'overlap':adapters[libtypes[sample]]['overlap'],
#             'minlen':adapters[libtypes[sample]]['minlen'],
#             'errorrate':adapters[libtypes[sample]]['errorrate']}


def get_cutadapt_settings(adapters, libtype):
    return {'sequence':adapters[libtype]['sequence'],
            'side':adapters[libtype]['side'],
            'overlap':adapters[libtype]['overlap'],
            'minlen':adapters[libtype]['minlen'],
            'errorrate':adapters[libtype]['errorrate']}


def get_trim_log(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    # We treat 5tera3 as 5tera because all the reads should have tera3 adapter otherwise they wouldn't get RTA ligated and sequenced
    if libtype == "5tera3":
        libtype="5tera"

    trimlog=samplesdir + "/{sample}/log/cutadapt." + libtype + ".log"

    return trimlog


def get_tera3_remove_input(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    # Get 5tera trimmed (and untrimmed) as input to 5tera3 tera3 adapter removal
    if libtype == "5tera3":
        fastq=samplesdir + "/{sample}/fastq/reads.1.sanitize.adapt_trim.5tera.fastq.gz"
    else:
        fastq=samplesdir + "/{sample}/fastq/reads.1.sanitize.fastq.gz"

    return fastq


def get_annot_trans_tera3_input(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    if libtype == "5tera3":
        done=samplesdir + "/{sample}/db/annot_trans_adapt.5tera.done"
    else:
        done=samplesdir + "/{sample}/db/annot_trans_utr3.done"

    return done


def get_sam_to_sqlite_genome_input(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    if libtype == "5tera":
        done=samplesdir + "/{sample}/db/annot_trans_adapt.5tera.done"
    else:
        done=samplesdir + "/{sample}/db/annot_trans_adapt.tera3.done"

    return done


def get_annot_genome_tera3_input(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    if libtype == "5tera3":
        done=samplesdir + "/{sample}/db/annot_genome_adapt.5tera.done"
    else:
        done=samplesdir + "/{sample}/db/annot_genome_gtf.done"

    return done


def get_sqldb_done(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    if libtype == "5tera":
        done=samplesdir + "/{sample}/db/annot_genome_adapt.5tera.done"
    else:
        done=samplesdir + "/{sample}/db/annot_genome_adapt.tera3.done"

    return done


def get_adapter_remove_sync_input(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    if libtype == "5tera":
        fastq=samplesdir + "/{sample}/fastq/reads.1.sanitize.adapt_trim.5tera.fastq.gz"
    else:
        fastq=samplesdir + "/{sample}/fastq/reads.1.sanitize.adapt_trim.tera3.fastq.gz"

    return fastq


def get_trim_merge(libtypes, sample):
    libtype=get_libtype(libtypes, sample)

    return {'wadapt':samplesdir + "/{sample}/fastq/reads.1.sanitize.w_adapt." + libtype + ".fastq.gz",
            'woadapt':samplesdir + "/{sample}/fastq/reads.1.sanitize.wo_adapt." + libtype + ".fastq.gz",
            }


def get_protocol(protocols, sample):
    protocol=protocols[sample]

    return protocol.lower()


# Get mem requirements for Samtools sort - Samtools sort uses mem per thread, not total mem
samtools_sort_mb=768
def get_mem_mb(wildcards, threads):
    return samtools_sort_mb * threads


##### read config #####
#SAMPLES=["sc.test.1"]
SAMPLES = pd.read_csv(config['samples'])['sample'].tolist() # read list of samples from the config

ASSEMBLIES = dict(pd.read_csv(config['samples']).set_index('sample', drop=False)['assembly']) # Read sample->assembly
LIBTYPES = dict(pd.read_csv(config['samples']).set_index('sample', drop=False)['libtype']) # Read sample->assembly
PROTOCOLS = dict(pd.read_csv(config['samples']).set_index('sample', drop=False)['protocol']) # Read sample->assembly


with open(config['adapters'], 'r') as file:
    ADAPTERS = yaml.safe_load(file)
with open(config['ref_links'], 'r') as file:
    REF_LINKS = yaml.safe_load(file)
#print(ADAPTERS[LIBTYPES["hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1"]])
with open(config['dirs'], 'r') as file:
    DIRS = yaml.safe_load(file)

    datadir = DIRS['datadir']
    samplesdir = DIRS['samplesdir']
    resdir = DIRS['resdir']

with open(config['resources'], 'r') as file:
    MAP_JOBS = yaml.safe_load(file)['map_jobs']

##### Wildcards constrains
wildcard_constraints:
    sample="[^/]*", # anything but "/" anywhere in the string; Note: don't use ^...$, to specify constrains, it woulnd't work
#    k="\d+", # Only numbers
    k="[1-9]+", # Only numbers starting with 1
    assembly="[^/]*", # anything but "/" anywhere in the string; Note: don't use ^...$, to specify constrains, it woulnd't work

##### load rules #####
include: "rules/references-prep.smk"
include: "rules/sanitize-reads.smk"
include: "rules/preprocess.smk"
include: "rules/map_minimap2.smk"
include: "rules/sam-sql-db.smk"
include: "rules/qc-post.smk"


##### target files #####
#REFS = ["hg38/genic_elements.cds.bed"]
TARGETS = ["log/cutadapt.len.pdf",
            "align/reads.1.sanitize.toGenome.sorted.bam.bai",
            "log/reads.1.sanitize.toGenome.len.mapped-vs-aligned.pdf",
            "log/reads.1.sanitize.noribo.toTranscriptome.len.mapped-vs-aligned.pdf",
            "log/reads.1.sanitize.toGenome.len.trim-vs-aligned.pdf",
            "log/reads.1.sanitize.noribo.toTranscriptome.len.trim-vs-aligned.pdf"
            ]
# Add sqldb-related outputs if sqldb is set to yes|true in the config file
if (re.compile("yes|true")).match(config['sqldb'].lower()):
    TARGETS.extend(["db/annot_sqldb.done",
                    "db/mapping-stats.genome.done",
                    "db/mapping-stats.transcriptome.done"])

# RESULTS = [""]


##### target rules #####
rule all:
    input:
        expand(samplesdir + "/{sample}/{target}", sample=SAMPLES, target=TARGETS),
#        expand(datadir + "/{ref}", ref=REFS), # If you need to pre-download the references
#        expand(resdir + "/{analysis}/{sample}/{result}", analysis="", sample=SAMPLES, result=RESULTS), # TODO
