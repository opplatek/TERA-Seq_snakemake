xmax%%
csd
%%xmax
read_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1/log/reads.1.sanitize.toGenome.read-len.full.txt"
aligned_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1/log/reads.1.sanitize.toGenome.align-len.full.txt"
read_len <- rio::import(read_len, format = "tsv") # Whole mapped reads
aligned_len <- rio::import(aligned_len, format = "tsv") # Only aligned read portions
# Get rid of secondary mappings from all reads
read_len <- read_len[read_len$len != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
# Get median length
med <- median(aligned_len$len) # Expand the frequency table
read_len <- as.matrix(table(read_len$len))
aligned_len <- as.matrix(table(aligned_len$len))
xmax <- max(as.numeric(rownames(aligned_len)), as.numeric(rownames(read_len)))
plot(
x = aligned_len, y = as.numeric(rownames(aligned_len)), cex = 0.2, col = "red", type = "l",
xlim = c(0, xmax),
xlab = paste0("Read length (capped at ", xmax), ylab = "Number of reads",
main = paste0("Aligned read length distribution\n", "\nMedian length: ", med)
)
lines(x = read_len, y = as.numeric(rownames(read_len)), cex = 0.2, col = "blue")
legend("topright",
legend = c("Mapped", "All"),
col = c("red", "blue"), lty = 1, cex = 1.2
)
plot(
x = as.numeric(rownames(aligned_len)), y = aligned_len, cex = 0.2, col = "red", type = "l",
xlim = c(0, xmax),
xlab = paste0("Read length (capped at ", xmax), ylab = "Number of reads",
main = paste0("Aligned read length distribution\n", "\nMedian length: ", med)
)
lines(x = as.numeric(rownames(read_len)), y = read_len, cex = 0.2, col = "blue")
plot(
x = as.numeric(rownames(aligned_len)), y = aligned_len, cex = 0.2, col = "red", type = "l",
xlim = c(0, xmax),
xlab = paste0("Read length (capped at ", xmax, ")"), ylab = "Number of reads",
main = paste0("Aligned read length distribution (red) vs Mapped reads length (blue)\n", "\nMedian length: ", med)
)
lines(x = as.numeric(rownames(read_len)), y = read_len, cex = 0.2, col = "blue")
legend("topright",
legend = c("Mapped", "All"),
col = c("red", "blue"), lty = 1, cex = 1.2
)
plot(
x = as.numeric(rownames(aligned_len)), y = aligned_len, cex = 0.2, col = "red", type = "p",
xlim = c(0, xmax),
xlab = paste0("Read length (capped at ", xmax, ")"), ylab = "Number of reads",
main = paste0("Aligned read length distribution (red) vs Mapped reads length (blue)\n", "\nMedian length: ", med)
)
points(x = as.numeric(rownames(read_len)), y = read_len, cex = 0.2, col = "blue")
if(nrow(read_len) == 0 | nrow(aligned_len) == 0){
print("foo")
}
TRUE | FALSE
TRUE || FALSE
FALSE | FALSE
read_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.read-len.full.txt"
aligned_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.align-len.full.txt"
ofile <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.len.pdf"
read_len <- rio::import(read_len, format = "tsv") # Whole mapped reads
aligned_len <- rio::import(aligned_len, format = "tsv") # Only aligned read portions
# Get rid of secondary mappings from all reads
read_len <- read_len[read_len$len != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
read_len
aligned_len
read_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.read-len.full.txt"
aligned_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.align-len.full.txt"
ofile <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.len.pdf"
read_len <- rio::import(read_len, format = "tsv") # Whole mapped reads
aligned_len <- rio::import(aligned_len, format = "tsv") # Only aligned read portions
# Get rid of secondary mappings from all reads
read_len <- read_len[read_len$len != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
if(nrow(read_len) == 0 | nrow(aligned_len) == 0){
pdf(ofile)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Either", args[1], "or", args[2], "didn't contain any lines. Please check the input files."),
cex = 1.6, col = "black")
dev.off()
browser()
}
# Get median length
med <- median(aligned_len$len) # Expand the frequency table
read_len <- as.matrix(table(read_len$len))
aligned_len <- as.matrix(table(aligned_len$len))
xmax <- max(as.numeric(rownames(aligned_len)), as.numeric(rownames(read_len)))
plot(
x = as.numeric(rownames(aligned_len)), y = aligned_len, cex = 0.2, col = "red", type = "l",
xlim = c(0, xmax),
xlab = paste0("Read length (capped at ", xmax, ")"), ylab = "Number of reads",
main = paste0("Aligned read length distribution vs Mapped reads length\n", "\nMedian length: ", med)
)
lines(x = as.numeric(rownames(read_len)), y = read_len, cex = 0.2, col = "blue")
legend("topright",
legend = c("Mapped", "All"),
col = c("red", "blue"), lty = 1, cex = 1.2
)
read_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.noribo.toTranscriptome.align-len.full.txt"
aligned_len <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.noribo.toTranscriptome.read-len.full.txt"
ofile <- "/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.len.pdf"
read_len <- rio::import(read_len, format = "tsv") # Whole mapped reads
aligned_len <- rio::import(aligned_len, format = "tsv") # Only aligned read portions
# Get rid of secondary mappings from all reads
read_len <- read_len[read_len$len != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
if(nrow(read_len) == 0 | nrow(aligned_len) == 0){
pdf(ofile)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Either", args[1], "or", args[2], "didn't contain any lines. Please check the input files."),
cex = 1.6, col = "black")
dev.off()
browser()
}
args[1]
args[2]
args <- NULL
args <- c("/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.noribo.toTranscriptome.align-len.full.txt",
"/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.noribo.toTranscriptome.read-len.full.txt",
"/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.len.pdf")
read_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
read_len <- rio::import(read_len, format = "tsv") # Whole mapped reads
aligned_len <- rio::import(aligned_len, format = "tsv") # Only aligned read portions
# Get rid of secondary mappings from all reads
read_len <- read_len[read_len$len != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
read_len
if(nrow(read_len) == 0 | nrow(aligned_len) == 0){
print("baa")
}
if(nrow(read_len) == 0 | nrow(aligned_len) == 0){
pdf(ofile)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Either", args[1], "or", args[2], "didn't contain any lines. Please check the input files."),
cex = 1.6, col = "black")
dev.off()
browser()
}
library("rio")
args <- NULL
args <- c("/home/jan/playground/TERA-Seq_snakemake/data/samples/hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1/log/reads.1.sanitize.adapt_trim.read-len.txt", # Trimme fastq read length (incl. unmapped)
"/home/jan/playground/TERA-Seq_snakemake/data/samples/hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1/log/reads.1.sanitize.toGenome.align-len.full.txt", # Whole mapped read length
"/home/jan/playground/TERA-Seq_snakemake/data/samples/hsa.dRNASeq.HeLa.polyA.CIP.decap.REL5.long.1/log/reads.1.sanitize.toGenome.len.trim-vs-mapped.pdf")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
colnames(total_len)
head(total_len)
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
len<-merge(total_len, aligned_len, all.x=T, by="length")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
len<-merge(total_len, aligned_len, all.x=T, by="length")
haed(total_len)
head(total_len)
head(aligned_len)
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len
head(aligned_len)
total_len
head(total_len)
head(aligned_len)
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len
head(aligned_len)
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len
total_len
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
len<-merge(total_len, aligned_len, all.x=T, by="length")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len
head(aligned_len)
head(total_len)
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
aligned_len
head(aligned_len)
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
colnames(aligned_len) <- "count"
aligned_len$length <- rownames(aligned_len)
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
colnames(aligned_len) <- "count"
aligned_len$length <- rownames(aligned_len)
aligned_len
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.matrix(table(aligned_len$length)) # Make frequency table
aligned_len
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.data.frame(table(aligned_len$length)) # Make frequency table
aligned_len
head(aligned_len)
colnames(aligned_len) <- c("length", "count")
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
len$ratio<-len$aln_ct/(len$total_ct/100)
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
xmax <- max(len$length)
xmax <- max(len$length)
plot(x=len$length, y=len$ratio,
xlim=c(0, xmax),
axes = F,
cex=0.2, col="red",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >90% mapped: ", len[len$ratio>90, "length"][1]))
axis(1, at=seq(0, xmax, by=250), labels=seq(0, xmax, by=250))
axis(2, at=seq(0, 100, by=10), labels=seq(0, 100, by=10))
len$ratio
max(len$ratio)
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len<-aligned_len[aligned_len$length!=1,] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.data.frame(table(aligned_len$length)) # Make frequency table
colnames(aligned_len) <- c("length", "count")
colnames(total_len)[colnames(total_len) == "count"] <- "total_ct"
colnames(aligned_len)[colnames(aligned_len) == "count"] <- "aln_ct"
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
len$ratio<-len$aln_ct/(len$total_ct/100)
View(len)
haed(len)
head(len)
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct))
library("dplyr")
suppressPackageStartupMessages(library("dplyr"))
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct))
# Make bins by 50 nucleotides
bin_len = 50
# Make bins by 50 nucleotides
bin_len <- 50
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct))
head(len)
# Make bins by 50 nucleotides
bin_len <- 100
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct))
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
# Make bins by 50 nucleotides
bin_len <- 100
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct))
len
sum(len$total_ct)
sum(len$aln_ct)
len$ratio<-len$aln_ct/(len$total_ct/100)
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
# Make bins by 50 nucleotides
bin_len <- 100
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct)) %>%
rename("length" = group)
len$ratio<-len$aln_ct/(len$total_ct/100)
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
# Make bins by 50 nucleotides
bin_len <- 100
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct)) %>%
rename("length" = group)
len$ratio<-len$aln_ct/(len$total_ct/100)
plot(x=len$length, y=len$ratio,
axes = F,
cex=0.2, col="red",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio>=90, "length"][1]))
axis(1, at=seq(0, xmax, by=250), labels=seq(0, xmax, by=250))
axis(2, at=seq(0, 100, by=10), labels=seq(0, 100, by=10))
abline(v=len[len$ratio>90, "length"][1], col="blue", lty = 3) # First length to reach 90% aln. rate
axis(1, at=seq(0, xmax, by=250), labels=seq(0, xmax, by=250))
axis(2, at=seq(0, 100, by=10), labels=seq(0, 100, by=10))
abline(v=len[len$ratio>90, "length"][1], col="blue", lty = 3) # First length to reach 90% aln. rate
len$ratio
len[len$ratio>90, "length"]
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
# Make bins by 50 nucleotides
bin_len <- 50
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct)) %>%
rename("length" = group)
len
len[1,1]
len$ratio<-len$aln_ct/(len$total_ct/100)
len
len$ra>90
len$ratio>90
en[len$ratio>90, "length"]
len[len$ratio>90, "length"]
len[len$ratio>90, "length"][1]
len[len$ratio>90, "length"][,1]
len<-merge(total_len, aligned_len, all.x=T, by="length")
len[is.na(len)]<-0
# Get median length
med_tot <- median(rep(len$length, len$total_ct)) 	# Expand the frequency tab
med_aln <- median(rep(len$length, len$aln_ct)) 	# Expand the frequency tab
# Make bins by 50 nucleotides
bin_len <- 50
len <- len %>%
group_by(group = cut(length, breaks = seq(0, max(length), !!bin_len))) %>%
summarise(total_ct = sum(total_ct), aln_ct = sum(aln_ct)) %>%
rename("length" = group) %>%
as.data.frame()
len$ratio<-len$aln_ct/(len$total_ct/100)
plot(x=len$length, y=len$ratio,
axes = F,
cex=0.2, col="red",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio>=90, "length"][1]))
axis(1, at=seq(0, xmax, by=250), labels=seq(0, xmax, by=250))
axis(2, at=seq(0, 100, by=10), labels=seq(0, 100, by=10))
abline(v=len[len$ratio>90, "length"][1], col="blue", lty = 3) # First length to reach 90% aln. rate
abline(h=mean(len$ratio), col="black", lty = 2)
abline(h=median(len$ratio), col="black")
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">90% mapped"),
col=c("red", "black", "black", "blue"), pch=c(1, NA, NA, NA), lty=c(NA, 2, 1, 3), cex=1)
plot(x=len$length, y=len$ratio,
axes = F,
cex=0.2, col="red", type="p",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio>=90, "length"][1]))
plot(x=len$length, y=len$ratio,
axes = F,
cex=0.2, col="red",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio>=90, "length"][1]))
plot(x=len$length, y=len$ratio,
axes = F,
cex=0.2, col="red",
xlab="Read length", ylab="Perc. of aligned",
main=paste0("Mapped vs all read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio>=90, "length"][1]))
axis(1, at=seq(0, xmax, by=250), labels=seq(0, xmax, by=250))
axis(2, at=seq(0, 100, by=10), labels=seq(0, 100, by=10))
abline(v=len[len$ratio>90, "length"][1], col="blue", lty = 3) # First length to reach 90% aln. rate
abline(h=mean(len$ratio), col="black", lty = 2)
abline(h=median(len$ratio), col="black")
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c("-", NA, NA, NA), lty=c(NA, 2, 1, 3), cex=1)
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c("-", NA, NA, NA), lty=c(2, 2, 1, 3), cex=1)
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c("-", NA, NA, NA), lty=c(NA, 2, 1, 3), lwd=c(2, 1, 1, 1))
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c("-", NA, NA, NA), lty=c(NA, 2, 1, 3), lwd=c(5, 1, 1, 1))
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c(NA, NA, NA, NA), lty=c(NA, 2, 1, 3), lwd=c(5, 1, 1, 1))
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c(NA, NA, NA, NA), lty=c(1, 2, 1, 3), lwd=c(5, 1, 1, 1))
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c(NA, NA, NA, NA), lty=c(0.5, 2, 1, 3), lwd=c(5, 1, 1, 1))
legend("bottom", legend=c("Mapped/all ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col=c("black", "black", "black", "blue"), pch=c(NA, NA, NA, NA), lty=c(1, 2, 1, 3), lwd=c(5, 1, 1, 1))
styler:::style_selection()
plot(
x = len$length, y = len$ratio,
axes = F,
cex = 0.2, col = "red",
xlab = "Read length", ylab = "Perc. of aligned",
main = paste0("Mapped vs All read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio >= 90, "length"][1])
)
axis(1, at = seq(0, xmax, by = 250), labels = seq(0, xmax, by = 250))
axis(2, at = seq(0, 100, by = 10), labels = seq(0, 100, by = 10))
abline(v = len[len$ratio > 90, "length"][1], col = "blue", lty = 3) # First length to reach 90% aln. rate
abline(h = mean(len$ratio), col = "black", lty = 2)
abline(h = median(len$ratio), col = "black")
legend("topright",
legend = c("Mapped/All ratio", "Ratio mean", "Ratio median", ">=90% mapped"),
col = c("black", "black", "black", "blue"), pch = c(NA, NA, NA, NA), lty = c(1, 2, 1, 3), lwd = c(5, 1, 1, 1)
)
plot(
x = len$length, y = len$ratio,
axes = F,
cex = 0.2, col = "red",
xlab = "Read length", ylab = "Perc. of aligned",
main = paste0("Mapped vs All read length ratios\n", "Median length - All: ", med_tot, "; Mapped total: ", med_aln, "\nFirst len. to have >=90% mapped: ", len[len$ratio >= 90, "length"][1])
)
#  axis(1, at = seq(0, xmax, by = 250), labels = seq(0, xmax, by = 250))
axis(1, at = len$length, labels = len$length)
axis(2, at = seq(0, 100, by = 10), labels = seq(0, 100, by = 10))
len$length
levels(len$length)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library("rio")
suppressPackageStartupMessages(library("dplyr"))
args <- NULL
args <- c("/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.adapt_trim.read-len.txt", # Trimme fastq read length (incl. unmapped)
"/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.noribo.toTranscriptome.align-len.full.txt", # Whole mapped read length
"/home/jan/playground/TERA-Seq_snakemake/data/samples/mm.test.1/log/reads.1.sanitize.toGenome.len.trim-vs-mapped.pdf")
total_len <- args[1]
aligned_len <- args[2]
ofile <- args[3]
total_len <- rio::import(total_len, format = "tsv")
aligned_len <- rio::import(aligned_len, format = "tsv")
aligned_len <- aligned_len[aligned_len$length != 1, ] # Reads with length 1 are usually secondary alignments which have "*" instead of read sequence
aligned_len <- as.data.frame(table(aligned_len$length)) # Make frequency table
colnames(aligned_len) <- c("length", "count")
aligned_len
